<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>algorithm on wangqingzh</title>
    <link>http://localhost:1313/categories/algorithm/</link>
    <description>Recent content in algorithm on wangqingzh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 13 Jun 2020 16:48:52 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/categories/algorithm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LeetCode 回溯算法</title>
      <link>http://localhost:1313/post/leetcode_backtrack/</link>
      <pubDate>Sat, 13 Jun 2020 16:48:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/leetcode_backtrack/</guid>
      <description>回溯算法解题套路框架 46 全排列 中等 https://leetcode-cn.com/problems/permutations/ 给定一个 没有重复 数字的序列，返回其所有可能的全排列。 示例: 1 2 3 4 5 6 7 8 9 10 输入: [1,2,3] 输出: [ [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]</description>
    </item>
    
    <item>
      <title>LeetCode 贪心算法</title>
      <link>http://localhost:1313/post/leetcode_greedy/</link>
      <pubDate>Wed, 10 Jun 2020 13:02:52 +0800</pubDate>
      
      <guid>http://localhost:1313/post/leetcode_greedy/</guid>
      <description></description>
    </item>
    
    <item>
      <title>剑指Offer 刷题</title>
      <link>http://localhost:1313/post/coding_interviews/</link>
      <pubDate>Mon, 08 Jun 2020 02:04:02 +0800</pubDate>
      
      <guid>http://localhost:1313/post/coding_interviews/</guid>
      <description>面试题3： 数组中重复的数字 数组 简单 查找 题目描述 在一个长度为 n 的数组里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个</description>
    </item>
    
    <item>
      <title>LeetCode 动态规划</title>
      <link>http://localhost:1313/post/leetcode_dp/</link>
      <pubDate>Sat, 06 Jun 2020 10:24:02 +0800</pubDate>
      
      <guid>http://localhost:1313/post/leetcode_dp/</guid>
      <description>5 最长回文子串 字符串 https://leetcode-cn.com/problems/longest-palindromic-substring/ 给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。 示例 1： 1 2 3 输入: &amp;#34;babad&amp;#34; 输出: &amp;#34;bab&amp;#34; 注意: &amp;#34;aba&amp;#34; 也是</description>
    </item>
    
  </channel>
</rss>